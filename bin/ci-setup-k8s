#!/usr/bin/env sh

set -e

# Env variables:
# - KUBE_SERVER
# - KUBE_USERNAME
# - KUBE_PASSWORD
# - KUBE_TOKEN
# - KUBE_NAMESPACE
# - KUBE_IMAGE
# - KUBE_CLIENT_CERTIFICATE_DATA
# - KUBE_CLIENT_CERTIFICATE_DATA_ENCODED
# - KUBE_CLIENT_KEY_DATA
# - KUBE_CLIENT_KEY_DATA_ENCODED

# For gcloud:
# - GCLOUD_SERVICE_ACCOUNT_NAME [optional]
# - GCLOUD_SERVICE_ACCOUNT_KEY [base64]
# - GCLOUD_CLUSTER_NAME
# - GCLOUD_CLUSTER_ZONE

# Login with gcloud
if [ "$GCLOUD_SERVICE_ACCOUNT_KEY" != "" ] && [ "$GCLOUD_CLUSTER_NAME" != "" ] && [ "$GCLOUD_CLUSTER_ZONE" != "" ] && [ "$GCLOUD_PROJECT" != "" ]; then
  echo "Authenticate to $GCLOUD_CLUSTER_NAME with gcloud on zone $GCLOUD_CLUSTER_ZONE"
  gcloudCredentialsFile=/tmp/google-cloud-credentials.json
  echo $GCLOUD_SERVICE_ACCOUNT_KEY | base64 -d > $gcloudCredentialsFile

  if [ "$GCLOUD_SERVICE_ACCOUNT_NAME" == "" ]; then
    GCLOUD_SERVICE_ACCOUNT_NAME=$(cat $gcloudCredentialsFile | jq -r '.client_email')
  fi

  gcloud config set project $GCLOUD_PROJECT
  gcloud auth activate-service-account $GCLOUD_SERVICE_ACCOUNT_NAME --key-file=$gcloudCredentialsFile
  gcloud container clusters get-credentials $GCLOUD_CLUSTER_NAME --zone $GCLOUD_CLUSTER_ZONE

# Login by token
elif [ "$KUBE_SERVER" != "" ] && [ "$KUBE_TOKEN" != "" ]; then
  echo "Authenticate to $KUBE_SERVER using token"
  kubectl config set-cluster cluster --server $KUBE_SERVER
  kubectl config set-credentials user --token=$KUBE_TOKEN
  kubectl config set-context default-system --cluster=cluster --user=user
  kubectl config use-context default-system

# Login by username/password
elif [ "$KUBE_SERVER" != "" ] && [ "$KUBE_USERNAME" != "" ] && [ "$KUBE_PASSWORD" != "" ]; then
  echo "Authenticate to $KUBE_SERVER"
  kubectl config set-cluster cluster --server $KUBE_SERVER

  if [ "$KUBE_AUTH_BASIC" = "true" ]; then
    kubectl config set-credentials user --username=$KUBE_USERNAME --password=$KUBE_PASSWORD
  else
    token=$(echo -n "Basic `echo -n $KUBE_USERNAME:$KUBE_PASSWORD | openssl base64 | tr -d '\n'`" | openssl base64 | tr -d '\n')
    kubectl config set-credentials user --token=$token
  fi

  kubectl config set-context default-system --cluster=cluster --user=user
  kubectl config use-context default-system

# Login by certificate
elif [ "$KUBE_SERVER" != "" ] && ([ "$KUBE_CLIENT_CERTIFICATE_DATA" != "" ] || [ "$KUBE_CLIENT_KEY_DATA" != "" ]); then
  echo "Authenticate to $KUBE_SERVER using certifcate and/or key"
  kubectl config set-cluster cluster --server $KUBE_SERVER --insecure-skip-tls-verify=true

  if [ "$KUBE_CLIENT_CERTIFICATE_DATA" != "" ]; then
    echo "Set certifcate..."
    if [ "$KUBE_CLIENT_CERTIFICATE_DATA_ENCODED" = "true" ]; then
      echo $KUBE_CLIENT_CERTIFICATE_DATA | base64 -d > /tmp/kube-client-crt
    else
      echo $KUBE_CLIENT_CERTIFICATE_DATA > /tmp/kube-client-crt
    fi
    kubectl config set-credentials user --client-certificate=/tmp/kube-client-crt --embed-certs=true
    rm /tmp/kube-client-crt
  fi

  if [ "$KUBE_CLIENT_KEY_DATA" != "" ]; then
    echo "Set key..."
    if [ "$KUBE_CLIENT_KEY_DATA_ENCODED" = "true" ]; then
      echo $KUBE_CLIENT_KEY_DATA | base64 -d > /tmp/kube-client-key
    else
      echo $KUBE_CLIENT_KEY_DATA > /tmp/kube-client-key
    fi
    kubectl config set-credentials user --client-key=/tmp/kube-client-key --embed-certs=true
    rm /tmp/kube-client-key
  fi

  kubectl config set-context default-system --cluster=cluster --user=user
  kubectl config use-context default-system
fi

# Create namespace and set in context
kubectl create namespace $KUBE_NAMESPACE || true
kubectl config set-context default-system --namespace=$KUBE_NAMESPACE
